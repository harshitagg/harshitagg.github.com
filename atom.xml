<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Log [info] Harshit]]></title>
  <link href="http://harshitagg.github.com/atom.xml" rel="self"/>
  <link href="http://harshitagg.github.com/"/>
  <updated>2013-03-31T00:12:55+05:30</updated>
  <id>http://harshitagg.github.com/</id>
  <author>
    <name><![CDATA[Harshit Agarwal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My findings on JS MV... libs]]></title>
    <link href="http://harshitagg.github.com/blog/2013/03/30/my-findings-on-js-mv-dot-dot-dot-libs/"/>
    <updated>2013-03-30T23:24:00+05:30</updated>
    <id>http://harshitagg.github.com/blog/2013/03/30/my-findings-on-js-mv-dot-dot-dot-libs</id>
    <content type="html"><![CDATA[<h2><strong><a href="http://http://knockoutjs.com/">Knockout JS</a></strong></h2>

<ul>
<li>Nice tutorials and documentation.</li>
<li>Nice to have in the smaller project, especially when you are satisfied with something which just provides UI data bindings.</li>
<li>Difficult to unit test.</li>
<li>Code separations is a concern.</li>
<li>If routing is required, then we need to include a new library for it.</li>
</ul>


<h2><strong><a href="http://angularjs.org/">Angular JS</a></strong></h2>

<ul>
<li>All-in-one package. Provides everything you expect from a MVC framework.</li>
<li>Built and maintained by Google. ;-)</li>
<li>Extends HTML and at the same time pollutes DOM!!!</li>
<li>Quick development.</li>
<li>Easier to unit test. It provides a unit testing API.</li>
<li>Steep learning curve.</li>
<li>Very little boilerplate.</li>
<li>Fewer tutorials and not very good documentation.</li>
<li>Becoming very popular with dev community.</li>
</ul>


<h2><strong><a href="http://backbonejs.org/">Backbone JS</a></strong></h2>

<ul>
<li>Nicely documented and very stable.</li>
<li>Relatively old and extensively used.</li>
<li>Lightweight and small. Therefore widely used on phone also.</li>
<li>Incomplete framework.</li>
<li>A lot of boilerplate.</li>
<li>Clean separation of concerns.</li>
<li>Strong force to follow certain pattern. Results less reusable code.</li>
<li>Misses on UI bindings.</li>
</ul>


<h2><strong><a href="http://emberjs.com/">Ember JS</a></strong></h2>

<ul>
<li>Relatively new.</li>
<li>Need a better documentation.</li>
<li>Unique support for composed views which increases code reusability.</li>
<li>Provides everything which angularjs does.</li>
<li>Uses Handlebarsjs for tempting views.</li>
</ul>


<p><strong>Things not covered and assumptions made in the assessment:
</strong></p>

<ul>
<li><strong>Performance</strong>: It is a very subjective matter and depend a lots on the bottlenecks of your application and on the criteria you use to judge it. Backbone is quite extensively used in mobiles and tablets so shouldn&#8217;t be a problem at all. Both Ember and Angular claim that they give snappy performance on phone though there is no use case to support this, at least I didn&#8217;t find any.</li>
<li><strong>Sources</strong>: I am not at all sharing my experience here as I haven&#8217;t used them myself. I just gathered all this information from various resources which I consider reliable.</li>
</ul>

]]></content>
  </entry>
  
</feed>
